competition.data <- read.csv("~/GitHub/ADA-Competetion/competition-data.csv")
View(competition.data)
knitr::opts_chunk$set(echo = TRUE)
head(competition.data)
competition.data <- read.csv("~/GitHub/ADA-Competetion/competition-data.csv")
View(competition.data)
knitr::opts_chunk$set(echo = TRUE)
head(competition.data) #Adi
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
mydata <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
mytable <- knitr::kable(mydata, format = "html", caption = "My table")
mytable
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
competition-data <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
competition_data <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
head(competition_data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
competition_data <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
head(competition_data)
library(DataExplorer)
create_report(competition_data, y = "outcome")
View(competition_data)
View(competition.data)
data_train1 <- competition_data[!data_train$outcome == 0, ]
data_train1 <- competition_data[!competition_data$outcome == 0, ]
set.seed(100)
train_y <- competition_data$outcome
train_x <- competition_data %>% select(-outcome)
set.seed(100)
train_y <- competition_data$outcome
train_x <- competition_data %>% select(outcome)
set.seed(100)
train_y <- competition_data$outcome
train_x <- competition_data %>%select(outcome)
set.seed(100)
train_y <- competition_data$outcome
train_x %>% competition_data %>% select(outcome)
View(competition_data)
set.seed(100)
train_y <- competition_data$outcome
folds <- createFolds(train_y, k = 10, returnTrain = TRUE)
set.seed(100)
train_y <- competition_data$outcome
folds <- createFolds(train_y, k = 10, returnTrain = TRUE)
library(caret)
set.seed(100)
train_y <- competition_data$outcome
folds <- createFolds(train_y, k = 10, returnTrain = TRUE)
ctrl <- trainControl(method = "cv", index = folds)
library(tidyverse)
library(dplyr)
library(caret)
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
competition_data <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
head(competition_data)
library(DataExplorer)
create_report(competition_data, y = "outcome")
data_train1 <- competition_data[!competition_data$outcome == 0, ]
library(caret)
set.seed(100)
train_y <- competition_data$outcome
folds <- createFolds(train_y, k = 10, returnTrain = TRUE)
ctrl <- trainControl(method = "cv", index = folds)
set.seed(100)
lmTune <- train(x = train_x, y = train_y,
method = "lm",
trControl = ctrl)
set.seed(100)
train_y <- competition_data$outcome
train_x <- data_train %>% select(-outcome)
set.seed(100)
train_y <- competition_data$outcome
train_x <- competition_data %>% select(-outcome)
folds <- createFolds(train_y, k = 10, returnTrain = TRUE)
ctrl <- trainControl(method = "cv", index = folds)
set.seed(100)
lmTune <- train(x = train_x, y = train_y,
method = "lm",
trControl = ctrl)
lmTune$results$RMSE
tooHigh <- findCorrelation(cor(train_x), .9)
trainXfiltered <- train_x[, -tooHigh]
testXfiltered  <-  train_x[, -tooHigh]
lmTuneFiltered <- train(x = trainXfiltered, y = train_y,
method = "lm",
trControl = ctrl)
lmTuneFiltered$results$RMSE
set.seed(100)
plsTune <- train(x = train_x, y = train_y,
method = "pls",
tuneGrid = expand.grid(ncomp = 1:21),
trControl = ctrl)
install.packages("pls")
set.seed(100)
plsTune <- train(x = train_x, y = train_y,
method = "pls",
tuneGrid = expand.grid(ncomp = 1:21),
trControl = ctrl)
View(trainXfiltered)
View(train_x)
View(testXfiltered)
View(plsTune)
View(lmTuneFiltered)
plsTune$bestTune
min(plsTune$results$RMSE)
install.packages("pcr")
set.seed(100)
pcrTune <- train(x = train_x, y = train_y,
method = "pcr",
tuneGrid = expand.grid(ncomp = 1:21),
trControl = ctrl)
plsTune$bestTune
min(plsTune$results$RMSE)
pcrTune$bestTune
min(pcrTune$results$RMSE)
plsResamples <- plsTune$results
plsResamples$Model <- "PLS"
pcrResamples <- pcrTune$results
pcrResamples$Model <- "PCR"
plsPlotData <- rbind(plsResamples, pcrResamples)
ggplot(
plsPlotData,
aes(x = ncomp, y = RMSE, color=Model)
) + geom_point() + geom_line() +
labs(x = "# Components",
y = "RMSE (Cross-Validation)")
plsResamples <- plsTune$results
plsResamples$Model <- "PLS"
pcrResamples <- pcrTune$results
pcrResamples$Model <- "PCR"
plsPlotData <- rbind(plsResamples, pcrResamples)
ggplot(
plsPlotData,
aes(x = ncomp, y = RMSE, color=Model)
) + geom_point() + geom_line() +
labs(x = "Components",
y = "RMSE (Cross-Validation)")
install.packages("ridge")
set.seed(100)
ridgeGrid <- expand.grid(lambda = seq(0, .1, length = 10))
ridgeTune <- train(x = train_x, y = train_y,
method = "ridge",
tuneGrid = ridgeGrid,
trControl = ctrl,
preProc = c("center", "scale")
set.seed(100)
ridgeGrid <- expand.grid(lambda = seq(0, .1, length = 10))
ridgeTune <- train(x = train_x, y = train_y,
method = "ridge",
tuneGrid = ridgeGrid,
trControl = ctrl,
preProc = c("center", "scale")
)
plot(ridgeTune)
ridgeTune$bestTune
min(ridgeTune$results$RMSE)
set.seed(100)
train_y <- competition_data$outcome
train_x <- competition_data %>% select(-outcome)
folds <- createFolds(train_y, k = 10, returnTrain = TRUE)
ctrl <- trainControl(method = "cv", index = folds)
set.seed(100)
lmTune <- train(x = train_x, y = train_y,
method = "lm",
trControl = ctrl)
lmTune$results$RMSE
tooHigh <- findCorrelation(cor(train_x), .9)
trainXfiltered <- train_x[, -tooHigh]
testXfiltered  <-  train_x[, -tooHigh]
lmTuneFiltered <- train(x = trainXfiltered, y = train_y,
method = "lm",
trControl = ctrl)
lmTuneFiltered$results$RMSE
set.seed(100)
lassoGrid <- expand.grid(lambda = c(0),
fraction = seq(.1, 1, length = 15))
lassoTune <- train(x = train_x, y = train_y,
method = "enet",
tuneGrid = lassoGrid,
trControl = ctrl,
preProc = c("center", "scale")
)
plot(lassoTune)
lassoTune$bestTune
min(lassoTune$results$RMSE)
set.seed(100)
enetGrid <- expand.grid(lambda = seq(0.0, 0.02, length = 5),
fraction = seq(.1, 1, length = 5))
enetTune <- train(x = train_x, y = train_y,
method = "enet",
tuneGrid = enetGrid,
trControl = ctrl,
preProc = c("center", "scale")
)
plot(enetTune)
enetTune$bestTune
min(enetTune$results$RMSE)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
competition_data <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
head(competition_data)
na_values <- sum(is.na(competition.data))
na_values
# Here the data has no N.A. value
corr_matrix <- cor(competition_data)
sorted_corr_matrix <- sort(corr_matrix["outcome",], decreasing = TRUE)
top_10_variables <- names(sorted_corr_matrix)[2:11]
top_10_variables
# Here these are the 10 variables that are correlated to the outcome variable
# But this code only gives us the predictors that are positively co related, thus we decided not to go ahead with these predictors.
library(ggplot2)
library(dplyr)
library(tidyverse)
pairs(competition.data %>% dplyr::select(X1:X10, outcome))
pairs(competition.data %>% dplyr::select(X11:X21, outcome))
pairs(competition.data%>% dplyr::select(outcome, X2, X3, X4, X5, X9, X11, X15, X18, X19, X20, X21))
library(caret)
predictors_only<- select(Preprocess_data, -Yield)
library(caret)
predictors_only<- select(Preprocess_data, -Yield)
library(caret)
predictors_only<- select(competition.data, -Yield)
library(caret)
dplyr:::select.data.frame(competition.data, -Yield)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
competition_data <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
head(competition_data)
View(competition_data)
na_values <- sum(is.na(competition.data))
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
competition_data <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
head(competition_data)
na_values <- sum(is.na(competition.data))
na_values <- sum(is.na(competition_data))
na_values
# Here the data has no N.A. value
corr_matrix <- cor(competition_data)
sorted_corr_matrix <- sort(corr_matrix["outcome",], decreasing = TRUE)
top_10_variables <- names(sorted_corr_matrix)[2:11]
top_10_variables
# Here these are the 10 variables that are correlated to the outcome variable
# But this code only gives us the predictors that are positively co related, thus we decided not to go ahead with these predictors.
library(ggplot2)
library(dplyr)
library(tidyverse)
pairs(competition.data %>% dplyr::select(X1:X10, outcome))
library(ggplot2)
library(dplyr)
library(tidyverse)
pairs(competition_data %>% dplyr::select(X1:X10, outcome))
pairs(competition_data %>% dplyr::select(X11:X21, outcome))
pairs(competition_data%>% dplyr::select(outcome, X2, X3, X4, X5, X9, X11, X15, X18, X19, X20, X21))
library(caret)
dplyr:::select.data.frame(competition_data, -Yield)
library(earth)
library(Formula)
library(plotmo)
library(plotrix)
library(TeachingDemos)
set.seed(123)
ctrl = trainControl(
method="cv", number = 10
)
library(caret)
dplyr:::select.data.frame(competition_data, outcome)
df_predictors_only <- data.frame(predictors_only)
library(caret)
dplyr:::select.data.frame(competition_data, outcome)
df_predictors_only <- data.frame(competition_data)
Preprocessing_fit <- preProcess(
df_predictors_only,
method = c("BoxCox", "center", "scale"))
Preprocessing_fit
transformed_predictors <- predict(
Preprocessing_fit, df_predictors_only)
Processed_data<-cbind(transformed_predictors,Preprocess_data$Yield)
library(caret)
dplyr:::select.data.frame(competition_data, outcome)
df_predictors_only <- data.frame(competition_data)
Preprocessing_fit <- preProcess(
df_predictors_only,
method = c("BoxCox", "center", "scale"))
Preprocessing_fit
transformed_predictors <- predict(
Preprocessing_fit, df_predictors_only)
Processed_data<-cbind(transformed_predictors,Preprocess_data$outcome)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
plot(ridgeTune)
set.seed(100)
ridgeGrid <- expand.grid(lambda = seq(0, .1, length = 10))
ridgeTune <- train(x = train_x, y = train_y,
method = "ridge",
tuneGrid = ridgeGrid,
trControl = ctrl,
preProc = c("center", "scale")
)
set.seed(123)
lmTune <- train(x = train_x, y = train_y,
method = "lm",
trControl = ctrl)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
competition_data <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
set.seed(123)
lmTune <- train(outcome ~ ., data = Processed_data ,
method = "lm",
trControl = ctrl)
library(knitr)
cwd <- dirname(rstudioapi::getSourceEditorContext()$path)
competition_data <- read.csv(paste(cwd, "competition-data.csv", sep = "/"))
head(competition_data)
set.seed(123)
lmTune <- train(outcome ~ ., data = Processed_data ,
method = "lm",
trControl = ctrl)
set.seed(123)
lmTune <- train(outcome ~ ., data = Processed_data ,
method = "lm",
trControl = ctrl)
set.seed(123)
lmTune <- train(outcome ~ ., data = Processed_data ,
method = "lm",
trControl = ctrl)
